{
    parserClass="info.kwarc.mmt.intellij.language.MMTParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="MMT"
    psiImplClassSuffix="_impl"
    psiPackage="info.kwarc.mmt.intellij.language.psi"
    psiImplPackage="info.kwarc.mmt.intellij.language.psi.imps"

    elementTypeHolderClass="info.kwarc.mmt.intellij.language.psi.MMTParserTypes"
    elementTypeClass="info.kwarc.mmt.intellij.language.psi.MMTElementType"
    tokenTypeClass="info.kwarc.mmt.intellij.language.psi.MMTTokenType"
}

/*
  WARNING: DO NOT USE underscores in identifiers for non-terminal!
           Apparently, the BNF and lexer generator behave weirdly, partially camelCase that, partially not
           leading to compile errors.
*/

file ::= mod*

mod ::= namespace | import | fixmeta | meta_datum (MD|error) | rule (MD|error) | documentScopedComment | theory | view | diagram

/* Level-agnostic things (e.g. meta data)
   ================================================ */
meta_datum ::= META_KEY uri tmlist

/* Document-level things (i.e. theories, views, diagrams etc.)
   ================================================ */
documentScopedComment ::= COMMENT_KEY (any|OD|DD)* (MD | error)
namespace ::= NAMESPACE_KEY uri (MD | error)
import ::= IMPORT_KEY pname uri (MD | error)
rule ::= RULE_KEY uri term
fixmeta ::= FIXMETA_KEY uri (MD|error)

theory ::=  theoryHeader ((ABBREV_KEY term) | (EQ_KEY theoryBody) | error) (MD | error) { mixin="info.kwarc.mmt.intellij.language.TheoryElement_impl" }
theoryHeader ::= THEORY_KEY ((pname (COLON_KEY uri)? (PARAM_KEY tmlist OD)?) | error)
theoryBody ::= (theory_decl)*

view ::= view_header ((ABBREV_KEY term) | (EQ_KEY view_body)| error) (MD | error)
view_header ::= IMPLICIT_KEY? VIEW_KEY ((pname COLON_KEY ((uri ARROW_KEY (uri | error)) | error)) | error)
view_body ::= viewDecl*

// Possibly generalize this to derived module declarations
// However, then we cannot catch the error in `diagram blub = PUSHOUT ...`
// where instead of a `:=` we wrongly used `=`.
diagram ::= DIAGRAM_KEY pname (COLON_KEY uri)? COLONEQ_KEY (any|OD|DD)* (MD | error)

/* Module-level things (i.e. declarations)
   ================================================ */
moduleScopedComment ::= COMMENT_KEY (any|OD)*
module_decl ::= (include | moduleScopedComment | meta_datum) (DD | error)
theory_decl ::= module_decl | nested_theory | structure | nested_view  | ((rule | theoryConstant) (DD | error)) | derivedDecl
viewDecl ::= module_decl | (viewConstant (DD | error))

nested_theory ::= theoryHeader ((ABBREV_KEY ((term DD) | error)) | (EQ_KEY theoryBody (MD | error))) { mixin="info.kwarc.mmt.intellij.language.TheoryElement_impl" }
nested_view ::= view_header ((ABBREV_KEY term DD) | (EQ_KEY view_body MD))

// includes may be defined (both in a theory and a view)
include ::= INCLUDE_KEY (urilit|uri) tmlist? (OD EQ_KEY (urilit|uri))?

theoryConstant ::= CONSTANT_KEY? pname (component OD)* component?
viewConstant ::= CONSTANT_KEY? pname ((defComp (DD|error)) | error)

structure ::= IMPLICIT_KEY? STRUCTURE_KEY pname COLON_KEY ((uri ((ABBREV_KEY term (DD|error)) | (EQ_KEY structureBody (MD|error)))) | error)

// Structures are usually like views, but may also contain declarations like "neg # ~1" that simply define notations
// without doing anything else
structureBody ::= (viewDecl | theoryConstant)*

derivedDecl ::= (derivedHeader theoryBody (MD|error)) | (derivedSimple DD)
derivedHeader ::= any any+ OD? EQ_KEY
derivedSimple ::= any any+

/* Declaration-level things (i.e. URIs, terms, notations, role annotations etc.)
   ============================================================================== */
component ::= objComment | typeComp | defComp | notComp | roleComp | metaComp | aliasComp

objComment ::= COMMENT_KEY any*
typeComp ::= COLON_KEY term
defComp ::= EQ_KEY term
notComp ::= NOT_KEY any+ prec?
prec ::= PREC_KEY TOKEN
roleComp ::= ROLE_KEY any+
metaComp ::= META_KEY term | LINK_KEY term
aliasComp ::= ALIAS_KEY pname

urilit ::= URI_KEY uri

uri ::= (uritoken COLON_KEY uritoken) | uritoken {
    mixin="info.kwarc.mmt.intellij.language.URIElement_impl"
}
uritoken ::= TOKEN | keywrd
pname ::= TOKEN | keywrd
any ::= TOKEN | keywrd | COLON_KEY | COLONEQ_KEY | COMMENT_KEY | EQ_KEY | NOT_KEY | ALIAS_KEY | PARAM_KEY | ARROW_KEY | COMMA_KEY

tmlist ::= (term COMMA_KEY)* term
term ::= (urilit|any)+

keywrd ::= COMMENT_KEY | NAMESPACE_KEY | IMPORT_KEY | ABBREV_KEY | THEORY_KEY  | VIEW_KEY | DIAGRAM_KEY | RULE_KEY | INCLUDE_KEY | PREC_KEY | ROLE_KEY | META_KEY | LINK_KEY | CONSTANT_KEY | IMPLICIT_KEY | STRUCTURE_KEY | FIXMETA_KEY | URI_KEY

// vvv This rule is needed even though IntelliJ marks it as unused
//     It forces the "WHITESPACE" token to be created, which is then used by the Lexer
//     generated from mmt.flex
ws ::= WHITESPACE

error ::= any*
